<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">
	<sql id="boardListSql">
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME, 
			   B.READCOUNT, 
			   B.CREATE_DATE
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO) 
		WHERE B.STATUS = 'Y'
	</sql>

	<resultMap id="boardListResultMap" type="Board">
		<id property="no" column="NO"/>
		<result property="title" column="TITLE"/>
		<result property="writerId" column="ID"/>
		<result property="originalFileName" column="ORIGINAL_FILENAME"/>
		<result property="renamedFileName" column="RENAMED_FILENAME"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>
	
	<!-- 
	1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법
	
	extends 속성은 다른 resultMap을 상속하는 속성이다. 
	
	collection 태그는 컬렉션에 해당하는 필드에 조회 결과를 매핑할 때 사용한다.
	  - javaType 속성은 컬렉션 필드의 자바 타입을 지정한다.
	  - select 속성은 조회하고자 하는 select 쿼리문의 id를 입력한다.
	  - column 속성은 조회하고자 하는 쿼리문에 파라미터를 전달할 때 사용한다. 
	
	* 1:1 관계인 객체를 조회하고 싶다면 association 요소를 사용해서 매핑해주면 된다.
	
	<resultMap id="boardDetailResultMap" type="Board" extends="boardListResultMap">
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" select="selectRepliesByNo" column="NO"/>
	</resultMap>
	-->
	
	<!-- 
	2. 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법
	-->
	<resultMap id="boardDetailResultMap" type="Board" extends="boardListResultMap">
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" columnPrefix="R_" resultMap="replyResultMap"/>
	</resultMap>
	
	<resultMap id="replyResultMap" type="Reply">
		<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="content" column="CONTENT"/>
		<result property="writerId" column="ID"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>
	
	<!-- 게시글 목록 조회 -->
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD WHERE STATUS='Y'
	</select>
	
	<select id="selectAll" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		ORDER BY B.NO DESC
	</select>

	<!-- 게시글 목록 조회 (검색 기능 적용) -->
	<select id="selectBoardCountByKeyWord" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B 
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
	</select>
	
	<select id="selectAllByKeyWord" resultMap="boardListResultMap">
		<!-- 
		1. 다중 <if>를 활용한 검색 기능 구현 
		<include refid="boardListSql"/>
		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
		ORDER BY B.NO DESC
		-->
		
		<!--  
		2. <choose>, <when>, <otherwise>를 활용한 검색 기능 구현
		<include refid="boardListSql"/>
		<choose>
			<when test="writer != null">
				AND M.ID LIKE '%' || #{writer} || '%'
			</when>
			<when test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</when>
			<when test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</when>
			<otherwise>
				위의 조건 중 하나라도 만족하지 않는 경우 포함될 쿼리문 작성
			</otherwise>
		</choose>
		ORDER BY B.NO DESC
		-->
		<!--
		3. <where>와 다중 <if>를 활용한 검색 기능 구현 
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME, 
			   B.READCOUNT, 
			   B.CREATE_DATE
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<where>
			<if test="writer != null">
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</where>
		ORDER BY B.NO DESC
		-->
		<!--  
		4. <trim>과 다중 <if>를 활용한 검색 기능 구현
		-->
		SELECT B.NO, 
			   B.TITLE, 
			   M.ID, 
			   B.ORIGINAL_FILENAME, 
			   B.RENAMED_FILENAME, 
			   B.READCOUNT, 
			   B.CREATE_DATE
		FROM BOARD B 
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="writer != null">
				M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</trim>
		ORDER BY B.NO DESC
	</select>

	<!-- 게시글 목록 조회 (검색 기능 적용 2) -->
	<select id="selectBoardCountByKeyWord2" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B 
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="type != null">
			<choose>
				<when test='type.equals("writer")'>
					AND M.ID LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyWord} || '%'
				</when>
			</choose>
		</if>
	</select>
	
	<select id="selectAllByKeyWord2" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<if test="type != null">
			<choose>
				<when test='type.equals("writer")'>
					AND M.ID LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("title")'>
					AND B.TITLE LIKE '%' || #{keyWord} || '%'
				</when>
				<when test='type.equals("content")'>
					AND B.CONTENT LIKE '%' || #{keyWord} || '%'
				</when>
			</choose>
		</if>
		ORDER BY B.NO DESC
	</select>

	<!-- 게시글 목록 조회 (필터 기능 적용) -->
	<select id="selectBoardCountByFilters" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B 
		JOIN MEMBER M ON (B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="array != null">
			AND B.TYPE IN
			<foreach item="filter" collection="array" open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
	</select>
	
	<select id="selectAllByFilters" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<!-- <if test="array != null"> -->
		<!-- <if test="list != null"> -->
		<if test="filters != null">
			<!-- 
				AND B.TYPE IN ('B2', 'B3')
			-->
			AND B.TYPE IN
			<foreach item="filter" collection="filters" open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 상세 조회(댓글 포함) -->
	<!--  
	1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법
	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
		SELECT  B.NO, 
				B.TITLE, 
				M.ID, 
				B.READCOUNT, 
				B.ORIGINAL_FILENAME, 
				B.RENAMED_FILENAME, 
				B.CONTENT, 
				B.TYPE,
				B.CREATE_DATE, 
				B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y' AND B.NO = #{no}
	</select>
	
	<select id="selectRepliesByNo" parameterType="_int" resultMap="replyResultMap">
		SELECT R.NO, 
			   R.BOARD_NO, 
			   R.CONTENT, 
			   M.ID, 
			   R.CREATE_DATE, 
			   R.MODIFY_DATE
		FROM REPLY R
		JOIN MEMBER M ON(R.WRITER_NO = M.NO)
		WHERE R.STATUS = 'Y' AND BOARD_NO = #{no}
		ORDER BY R.NO DESC
	</select>
	-->

	<!-- 2. 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법 -->
	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
		SELECT B.NO,
		       B.TITLE, 
		       M.ID, 
		       B.READCOUNT,
		       B.ORIGINAL_FILENAME,
		       B.RENAMED_FILENAME,
		       B.CONTENT,
		       B.TYPE,
		       B.CREATE_DATE,
		       B.MODIFY_DATE,
		       R.NO AS "R_NO",
		       R.BOARD_NO AS "R_BOARD_NO",
		       R.CONTENT AS "R_CONTENT",
		       M2.ID AS "R_ID",
		       R.CREATE_DATE AS "R_CREATE_DATE",
		       R.MODIFY_DATE AS "R_MODIFY_DATE"
		FROM BOARD B
		INNER JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		LEFT OUTER JOIN REPLY R ON(B.NO = R.BOARD_NO)
		LEFT OUTER JOIN MEMBER M2 ON(R.WRITER_NO = M2.NO)
		WHERE B.STATUS = 'Y' AND B.NO = #{no}
	</select>

	<!-- 게시글 등록 -->
	<insert id="insertBoard" parameterType="Board"
			useGeneratedKeys="true" keyProperty="no" keyColumn="NO">
		INSERT INTO BOARD (
			NO,
			WRITER_NO,
			TITLE,
			CONTENT,
			ORIGINAL_FILENAME,
			RENAMED_FILENAME
		)
		VALUES(
			SEQ_BOARD_NO.NEXTVAL,
			#{writerNo},
			#{title},
			#{content},
			#{originalFileName},
			#{renamedFileName}
		)
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="Board">
		<!--  
		1. 기존 JDBC에서 사용하던 쿼리를 활용한 update 구문 작성
		UPDATE BOARD 
		SET 
			TITLE = #{title},
			CONTENT = #{content},
			ORIGINAL_FILENAME = #{originalFileName},
			RENAMED_FILENAME = #{renamedFileName},
			MODIFY_DATE = SYSDATE 
		WHERE NO = #{no}
		
		2. <set>과 다중 <if>를 활용한 update 구문 작성
		UPDATE BOARD 
		<set>
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFileName != null">
				ORIGINAL_FILENAME = #{originalFileName},
			</if>
			<if test="renamedFileName != null">
				RENAMED_FILENAME = #{renamedFileName},
			</if>
			MODIFY_DATE = SYSDATE 
		</set>
		WHERE NO = #{no}
		
		3. <trim>과 다중 <if>를 활용한 update 구문 작성
		-->
		UPDATE BOARD 
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFileName != null">
				ORIGINAL_FILENAME = #{originalFileName},
			</if>
			<if test="renamedFileName != null">
				RENAMED_FILENAME = #{renamedFileName},
			</if>
			MODIFY_DATE = SYSDATE
		</trim>
		WHERE NO = #{no}
	</update>
	
	<!-- 게시글 삭제 -->
	<update id="updateStatus" parameterType="map">
		UPDATE BOARD SET STATUS = #{status} WHERE NO = #{no}
	</update>
</mapper>