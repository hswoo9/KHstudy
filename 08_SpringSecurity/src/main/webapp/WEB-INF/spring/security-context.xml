<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<bean id="bcryptPasswordEncoder"
		  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"		
	/>
	
	<bean id="memberDetailsService"
		  class="com.kh.security.member.model.service.MemberDetailsService"
	/>
	
	<bean id="daoAuthenticationProvider" 
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"
		  p:hideUserNotFoundExceptions="false"
		  p:passwordEncoder-ref="bcryptPasswordEncoder"
		  p:userDetailsService-ref="memberDetailsService"
	/>
	
	<bean id="loginSuccessHandler"
		  class="com.kh.security.common.handler.LoginSuccessHandler"	
	/>
	
	<bean id="loginFailureHandler"
		  class="com.kh.security.common.handler.LoginFailureHandler"	
	/>
	
	<!-- 
		resources 폴더 안에 있는 파일들은 security 대상이 아니라는 것을 나타낸다.
	-->
	<security:http pattern="/js/**" security="none"></security:http>
	<security:http pattern="/css/**" security="none"></security:http>
	<security:http pattern="/images/**" security="none"></security:http>
	
	<!--  
		security:http
		  - HTTP에 대한 요청을 안전하게 보호하는 방법을 설정하는 요소이다.
		  - auto-config 속성은 로그인, 로그아웃 등에 대한 기본 설정을 지정하는 속성이다.
		  - use-expressions 속성은 SpEL(스프링 표현식)의 사용 여부를 지정하는 속성이다.
	-->
	<security:http auto-config="true" use-expressions="true">
		<!--  
			security:intercept-url
			  - pattern 속성에 해당하는 요청에 대한 접속 권한을 설정한다.
		-->
		<security:intercept-url pattern="/login" access="permitAll"/>
		<security:intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
		<security:intercept-url pattern="/member/**" access="hasAnyRole('ADMIN', 'USER')"/>
		<security:intercept-url pattern="/**" access="isAuthenticated()" />
		<security:access-denied-handler error-page="/accessError"/>
		
		<!--
			CSRF 속성을 사용하지 않게 설정한다.
			<security:csrf disabled="true"/>
		-->
		
		<security:form-login
			login-page="/login"
			username-parameter="userId"
			password-parameter="userPwd"
			authentication-success-handler-ref="loginSuccessHandler"
			authentication-failure-handler-ref="loginFailureHandler"
		/>
		
		<security:logout
			logout-url="/logout"
			logout-success-url="/"
		/>
		
		<!-- 기억하기 기능 활성화 -->
		<security:remember-me key="khweb" token-validity-seconds="1209600"/>
		
		<!-- 로그인 세션 1개만 유지하기 -->
		<security:session-management invalid-session-url="/login">
			<security:concurrency-control max-sessions="1" expired-url="/login"/>
		</security:session-management>
	</security:http>
	
	<!--  
		security:authentication-manager
		  - 유저들에 대한 인증과 관련된 설정을 하는 요소이다.
		  - 인메모리, DB, LDAP 등 다양한 방법으로 유저 조회 및 인증을 구현하여 설정해 줄 수 있다.
	
		인메모리 방식 설정 (테스트 용도로 사용)
		<security:authentication-manager>
			<security:authentication-provider>
				<security:password-encoder ref="bcryptPasswordEncoder"/>
				<security:user-service>
					<security:user name="user"
							   	   password="$2a$10$tQ7jxV2b63HE7rnV7ePm3OcqS6v.jklc0.gY16HstiP20InwobqAK" 
								   authorities="ROLE_USER"/>
					<security:user name="admin"
							   	   password="$2a$10$tQ7jxV2b63HE7rnV7ePm3OcqS6v.jklc0.gY16HstiP20InwobqAK" 
								   authorities="ROLE_ADMIN,ROLE_USER"/>
				</security:user-service>
			</security:authentication-provider>
		</security:authentication-manager>
	-->
	
	<!-- WEB 계정의 Member 테이블에서 유저 조회 및 인증을 구현하도록 설정 
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="memberDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	-->
	<!--  
		* 참고
	-->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>
</beans>
